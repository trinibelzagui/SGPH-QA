{"version":3,"sources":["../src/profile.js"],"names":["getNightwatchConfig","profile","prefix","config","desiredCapabilities","debug","JSON","stringify","getProfiles","opts","argvMock","runArgv","Promise","resolve","browsers","local_browser","push","local_browsers","forEach","split","browser","settings","testFramework","profiles","executor","warn","id","getCapabilities","reject","p","e","err","listBrowsers","callback","listedBrowsers","log","join"],"mappings":"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","file":"profile.js","sourcesContent":["import _ from \"lodash\";\nimport { argv } from \"yargs\";\nimport logger from \"testarmada-logger\";\n\nexport default {\n  getNightwatchConfig: (profile) => {\n    logger.prefix = \"Local Executor\";\n\n    const config = {\n      desiredCapabilities: profile.desiredCapabilities\n    };\n\n    logger.debug(`executor config: ${JSON.stringify(config)}`);\n    return config;\n  },\n\n  getProfiles: (opts, argvMock = null) => {\n    logger.prefix = \"Local Executor\";\n\n    let runArgv = argv;\n\n    if (argvMock) {\n      runArgv = argvMock;\n    }\n\n    return new Promise((resolve) => {\n      const browsers = [];\n\n      if (runArgv.local_browser) {\n        browsers.push(runArgv.local_browser);\n      } else if (runArgv.local_browsers) {\n        _.forEach(runArgv.local_browsers.split(\",\"), (browser) => {\n          browsers.push(browser);\n        });\n      }\n\n      if (opts.settings.testFramework.profile\n        && opts.settings.testFramework.profile.getProfiles) {\n        // if framework plugin knows how to solve profiles\n        const profiles = opts.settings.testFramework.profile.getProfiles(browsers);\n\n        _.forEach(profiles, (profile) => {\n          profile.executor = \"local\";\n        });\n\n        logger.debug(`detected profile: ${JSON.stringify(profiles)}`);\n        resolve(profiles);\n      } else {\n        // framework doesn't understand how to solve profiles\n        logger.warn(\"no profile is detected, use the default one\");\n        resolve([{ executor: \"local\", id: \"mocha\" }]);\n      }\n    });\n\n  },\n\n  /*eslint-disable global-require*/\n  getCapabilities: (profile, opts) => {\n    logger.prefix = \"Local Executor\";\n    return new Promise((resolve, reject) => {\n      if (opts.settings.testFramework.profile\n        && opts.settings.testFramework.profile.getCapabilities) {\n        // if framework plugin knows how to solve capabilities\n\n\n        try {\n          const p = opts.settings.testFramework.profile.getCapabilities(profile);\n          p.executor = \"local\";\n\n          resolve(p);\n        } catch (e) {\n          logger.err(`profile: ${profile} isn't found`);\n          reject(e);\n        }\n\n      } else {\n        // framework doesn't understand how to solve capabilities\n        logger.warn(\"no capabilities is detected, use the default one\");\n        resolve({ executor: \"local\", id: \"mocha\" });\n      }\n    });\n  },\n\n  /*eslint-disable global-require*/\n  listBrowsers: (opts, callback) => {\n    logger.prefix = \"Local Executor\";\n\n    if (opts.settings.testFramework.profile\n      && opts.settings.testFramework.profile.listBrowsers) {\n      // if framework plugin knows how to list browsers\n\n      const listedBrowsers = opts.settings.testFramework.profile.listBrowsers();\n      logger.log(`Available browsers: ${listedBrowsers.join(\",\")}`);\n\n      return callback();\n    } else {\n      // if framework plugin doesn't know how to list browsers\n      return callback();\n    }\n  }\n};\n"]}