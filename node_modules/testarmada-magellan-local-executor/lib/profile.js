"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _yargs = require("yargs");

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getNightwatchConfig: function getNightwatchConfig(profile) {
    _testarmadaLogger2.default.prefix = "Local Executor";

    var config = {
      desiredCapabilities: profile.desiredCapabilities
    };

    _testarmadaLogger2.default.debug("executor config: " + JSON.stringify(config));
    return config;
  },

  getProfiles: function getProfiles(opts) {
    var argvMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _testarmadaLogger2.default.prefix = "Local Executor";

    var runArgv = _yargs.argv;

    if (argvMock) {
      runArgv = argvMock;
    }

    return new Promise(function (resolve) {
      var browsers = [];

      if (runArgv.local_browser) {
        browsers.push(runArgv.local_browser);
      } else if (runArgv.local_browsers) {
        _lodash2.default.forEach(runArgv.local_browsers.split(","), function (browser) {
          browsers.push(browser);
        });
      }

      if (opts.settings.testFramework.profile && opts.settings.testFramework.profile.getProfiles) {
        // if framework plugin knows how to solve profiles
        var profiles = opts.settings.testFramework.profile.getProfiles(browsers);

        _lodash2.default.forEach(profiles, function (profile) {
          profile.executor = "local";
        });

        _testarmadaLogger2.default.debug("detected profile: " + JSON.stringify(profiles));
        resolve(profiles);
      } else {
        // framework doesn't understand how to solve profiles
        _testarmadaLogger2.default.warn("no profile is detected, use the default one");
        resolve([{ executor: "local", id: "mocha" }]);
      }
    });
  },

  /*eslint-disable global-require*/
  getCapabilities: function getCapabilities(profile, opts) {
    _testarmadaLogger2.default.prefix = "Local Executor";
    return new Promise(function (resolve, reject) {
      if (opts.settings.testFramework.profile && opts.settings.testFramework.profile.getCapabilities) {
        // if framework plugin knows how to solve capabilities


        try {
          var p = opts.settings.testFramework.profile.getCapabilities(profile);
          p.executor = "local";

          resolve(p);
        } catch (e) {
          _testarmadaLogger2.default.err("profile: " + profile + " isn't found");
          reject(e);
        }
      } else {
        // framework doesn't understand how to solve capabilities
        _testarmadaLogger2.default.warn("no capabilities is detected, use the default one");
        resolve({ executor: "local", id: "mocha" });
      }
    });
  },

  /*eslint-disable global-require*/
  listBrowsers: function listBrowsers(opts, callback) {
    _testarmadaLogger2.default.prefix = "Local Executor";

    if (opts.settings.testFramework.profile && opts.settings.testFramework.profile.listBrowsers) {
      // if framework plugin knows how to list browsers

      var listedBrowsers = opts.settings.testFramework.profile.listBrowsers();
      _testarmadaLogger2.default.log("Available browsers: " + listedBrowsers.join(","));

      return callback();
    } else {
      // if framework plugin doesn't know how to list browsers
      return callback();
    }
  }
};
//# sourceMappingURL=profile.js.map