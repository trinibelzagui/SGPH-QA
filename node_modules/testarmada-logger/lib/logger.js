"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _yargs = require("yargs");

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _cliColor = require("cli-color");

var _cliColor2 = _interopRequireDefault(_cliColor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _debug = _yargs.argv.debug || process.env.TESTARMADA_LOGGER_DEBUG;

var PREFIX = "Testarmada";

var Logger = function () {
  function Logger() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, Logger);

    this.prefix = prefix ? prefix : PREFIX;
    this.output = console;
  }

  _createClass(Logger, [{
    key: "debug",
    value: function debug() {
      /* istanbul ignore if */
      if (_debug) {
        var deb = _cliColor2.default.blueBright("[DEBUG]");

        for (var _len = arguments.length, msg = Array(_len), _key = 0; _key < _len; _key++) {
          msg[_key] = arguments[_key];
        }

        this.output.log(_util2.default.format("%s [%s] %s", deb, this.prefix, msg));
      }
    }
  }, {
    key: "log",
    value: function log() {
      var info = _cliColor2.default.greenBright("[INFO]");

      for (var _len2 = arguments.length, msg = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        msg[_key2] = arguments[_key2];
      }

      this.output.log(_util2.default.format("%s [%s] %s", info, this.prefix, msg));
    }
  }, {
    key: "warn",
    value: function warn() {
      var warn = _cliColor2.default.yellowBright("[WARN]");

      for (var _len3 = arguments.length, msg = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        msg[_key3] = arguments[_key3];
      }

      this.output.warn(_util2.default.format("%s [%s] %s", warn, this.prefix, msg));
    }
  }, {
    key: "err",
    value: function err() {
      var err = _cliColor2.default.redBright("[ERROR]");

      for (var _len4 = arguments.length, msg = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        msg[_key4] = arguments[_key4];
      }

      this.output.error(_util2.default.format("%s [%s] %s", err, this.prefix, msg));
    }
  }, {
    key: "loghelp",
    value: function loghelp() {
      for (var _len5 = arguments.length, msg = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        msg[_key5] = arguments[_key5];
      }

      this.output.log(_util2.default.format("%s", msg));
    }
  }]);

  return Logger;
}();

module.exports = new Logger();
//# sourceMappingURL=logger.js.map